You are my “Deployment Mechanic” for a Replit Node.js (Express) + Vite/React TypeScript app.

GOAL: Make autoscale deployment succeed and surface logs WITHOUT changing any UI/UX or GTM code. Protect the current frontend (design freeze). Only touch build/deploy/server plumbing.

REQUIREMENTS
- Keep all existing UI styling, pages, routes, and GTM (container GTM-TQR67W6) intact.
- Ensure production build produces dist/index.js for the server.
- Ensure server binds to process.env.PORT and host 0.0.0.0 in production.
- Ensure a JSON health endpoint at /api/health is the FIRST route added, so Vite doesn’t intercept it. It must return 200 with fields {status, timestamp, uptime, environment, port} in both dev and prod.
- Ensure API routes are mounted under /api so the SPA fallback never hijacks them.
- Improve production logging so Replit “Deployments → Logs” shows:
  [DEPLOYMENT] Server started on PORT …
  [DEPLOYMENT] Health check from <IP>
  [DEPLOYMENT] Build timestamp …
- Don’t add any long-running intervals/timeouts that block autoscale idle.
- Do not modify any UI classes, copy, images, or analytics tags.

CHECK & FIX LIST
1) Verify .replit has:
   [deployment]
   deploymentTarget = "autoscale"
   build = ["npm","run","build"]
   run   = ["npm","run","start"]
   If not, fix it.

2) Verify package.json scripts:
   - "build": uses Vite for client AND builds server to dist/index.js (esbuild or tsup is fine).
   - "start": "NODE_ENV=production node dist/index.js"
   If server build output isn’t dist/index.js, standardize it to that target.

3) Server plumbing:
   - Import express; set app.set('trust proxy', 1) for correct req.ip in autoscale.
   - FIRST route: app.get('/api/health', …) returns JSON (200) as described.
   - Add concise request logging middleware for /api routes only (method, path, ip).
   - Serve static client from the Vite output directory (e.g., client/dist or the configured outDir).
   - SPA fallback: for non-/api requests only, send index.html.
   - Ensure app.listen(process.env.PORT, '0.0.0.0', …) with a [DEPLOYMENT] log.

4) Build verification:
   - Run a production build in the workspace, confirm dist/index.js exists and is small (~10s of KB).
   - If TypeScript paths/imports break, resolve them (no UI edits).

5) Smoke tests (workspace):
   - curl http://localhost:${PORT || 5000}/api/health → must return JSON 200.
   - Log human-readable “[DEPLOYMENT]” lines on startup and health checks.

6) Deploy readiness:
   - Explain exactly what was changed (file + diff summary).
   - Re-run deploy and tell me where to click in Replit (“Deployments → <my app> → Logs”).
   - If autoscale logs appear only during requests, remind me to open /api/health in the deployed URL to see logs.

CONSTRAINTS
- NO visual/UX changes.
- NO removal of Google Tag Manager or analytics wiring.
- Keep code minimal, explicit, and production-safe.

DELIVERABLES
- A brief “What I changed & why” summary.
- The exact deployed URL path to test health.
- The 3–4 expected log lines I should see after the first request.